// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "toh-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// CharacterRepository is an autogenerated mock type for the CharacterRepository type
type CharacterRepository struct {
	mock.Mock
}

// GetCharacterById provides a mock function with given fields: id
func (_m *CharacterRepository) GetCharacterById(id int64) (*entity.Character, error) {
	ret := _m.Called(id)

	var r0 *entity.Character
	if rf, ok := ret.Get(0).(func(int64) *entity.Character); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Character)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCharacter provides a mock function with given fields: character
func (_m *CharacterRepository) InsertCharacter(character *entity.Character) error {
	ret := _m.Called(character)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Character) error); ok {
		r0 = rf(character)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewCharacterRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCharacterRepository creates a new instance of CharacterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCharacterRepository(t NewCharacterRepositoryT) *CharacterRepository {
	mock := &CharacterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
